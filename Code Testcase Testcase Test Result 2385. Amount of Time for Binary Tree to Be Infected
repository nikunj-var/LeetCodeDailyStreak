class Solution {
public:
    unordered_map<TreeNode*,TreeNode*> nodeToparent;
    TreeNode* mapping(TreeNode* root,int start){
        TreeNode* target = NULL;
        queue<TreeNode*> q;
        q.push(root);
        nodeToparent[root] = NULL;
        while(!q.empty()){
            TreeNode* temp = q.front();
            q.pop();
            if(temp->val == start){
                target = temp;
            }
            if(temp -> left){
                nodeToparent[temp->left] = temp;
                q.push(temp->left);
            }
            if(temp -> right){
                nodeToparent[temp->right] = temp;
                q.push(temp->right);
            }
        }
        return target;
    }
    int infected(TreeNode* root){
        unordered_map<TreeNode* , bool> visited;
        queue<TreeNode*> q;
        q.push(root);
        visited[root] = true;
        int time = 0;
        while(!q.empty()){
            int n = q.size();
            bool flag = false;
            for(int i = 0;i<n;i++){
                TreeNode* temp = q.front();
                q.pop();
                if(temp->left && !visited[temp->left]){
                    q.push(temp->left);
                    visited[temp->left] = true;
                    flag = 1;
                }
                if(temp->right && !visited[temp->right]){
                    q.push(temp->right);
                    visited[temp->right] = true;
                    flag = 1;
                }
                if(nodeToparent[temp] && !visited[nodeToparent[temp]]){
                    q.push(nodeToparent[temp]);
                    visited[nodeToparent[temp]] = true;
                    flag = 1;
                }
            }
            if(flag){
                time++;
            }
        }
        return time;
    }
    int amountOfTime(TreeNode* root, int start) {
        if(root == NULL){
            return 0;
        }
        TreeNode* target = mapping(root,start);
        int time = infected(target);
        return time;
    }
};
